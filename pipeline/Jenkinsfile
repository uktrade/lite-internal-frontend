pipeline
        {
          agent {
             node {
                label 'docker.ci.uktrade.io'
             }
          }
            parameters
            {
                // Define DRIVER parameter for running the test
                choice(name: 'DRIVER', description: 'Choose browser', choices: 'chrome\nfirefox\nheadless')

                // Define test path to run
                string(name: 'TESTS_TO_RUN', defaultValue: '', description: 'choose test to run, leave blank to run all tests')

                // Define environment to run tests on
                choice(name: 'ENVIRONMENT', description: 'choose what environment to run in', choices: 'staging\ndev\nuat')

                //Define branch to run
                string(name: 'BRANCH', defaultValue: 'master', description: 'choose branch to run against')
            }

            options
            {
                // keep last 100 builds
                buildDiscarder(logRotator(numToKeepStr: '10'))

                // add timestamp
                timestamps()
            }

            // agent any // run the pipeline on any available node
            stages
            {
                stage('SCM: code update')
                {
                    steps
                    {
                        // checking out repository
                        checkout([
                                $class: 'GitSCM', branches: [[name: "${params.BRANCH}"]],
                                userRemoteConfigs: [[url: 'https://github.com/uktrade/lite-internal-frontend.git']]
                        ])

                        // Create Allure report folders and grant relevant permissions
                        sh "mkdir -p ./ui_automation_tests/allure-results"
                        // sh "rm -rf ./ui_automation_tests/allure-results/*"
                        // sh "chown jenkins:jenkins ./ui_automation_tests/allure-results"
                    }
                }
                stage('Docker build')
                {
                    steps
                    {
                        script
                        {
                            sh "sudo find . -name '*.pyc' -delete"
                            // copying and building selenium base
                            sh "cp ui_automation_tests/selenium-base-image/Dockerfile ."
                            docker.build("internal/selenium_base")

                            // copying and building selenium image
                            sh "cp ui_automation_tests/selenium-automation-run/Dockerfile ."
                            docker.build("internal/selenium_image")
                        }
                    }
                }
                stage('Run test')
                {
                    steps
                    {
                        script
                        {
                            try
                            {
                                // creating timestamp
                                def now = new Date()
                                tstamp = now.format("yyyyMMdd-HH:mm:ss.SSSS", TimeZone.getTimeZone('UTC'))

                                // running selenium tests using pytest via docker
                                sh "docker run " +
                                        "--privileged " +                               // The --privileged flag gives all capabilities to the container,
                                        "--shm-size=1g " +                              // shared memory size is set to 1G to prevent chromedriver memory leak
                                        "--rm " +                                       // remove container at the end of the session
                                        "-e PYTHONPATH=/code/ui_automation_tests/ " +   // environment variable support
                                        "-e ENVIRONMENT=${params.ENVIRONMENT} " +
                                        "-w=/code " +                                   // setting working directory
                                        "-v `pwd`/ui_automation_tests:/code " +         // mount git repository to the container
                                        "internal/selenium_image:latest " +             // the specific image that being used (latest image by default)
                                        "-v " +                                         // verbose (for debugging purpose)
                                        "-s " +
                                        "${params.TESTS_TO_RUN}"
                            }
                            catch (error)
                            {
                                echo error.message
                            }
                        }
                    }
                }
            }
            post
            {
                always
                {
                    // Generate Allure Report
                    generateAllureReport()
                }
            }
        }

// Generate Allure report function
def generateAllureReport()
    {
        try
        {
            allure([
                    commandline      : '2.5.0',
                    includeProperties: false,
                    jdk              : '',
                    properties       : [[key: 'allure.tests.management.pattern', value: 'http://tms.company.com/%s']],
                    reportBuildPolicy: 'ALWAYS',
                    results          : [[path: 'ui_automation_tests/allure-results']]
            ])
        }
        catch (error)
        {
            error.message
        }
    }
