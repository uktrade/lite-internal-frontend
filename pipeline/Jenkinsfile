pipeline {

  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    job: ${env.JOB_NAME}
    job_id: ${env.BUILD_NUMBER}
spec:
  nodeSelector:
    role: worker
  containers:
  - name: lite-selenium-test
    image: quay.io/uktrade/lite-selenium-base
    imagePullPolicy: Always
    command:
    - cat
    tty: true
"""
    }
  }

parameters
  {
    // Define DRIVER parameter for running the test
    choice(name: 'DRIVER', description: 'Choose browser', choices: 'chrome\nfirefox\nheadless')

    // Define test path to run
    string(name: 'TESTS_TO_RUN', defaultValue: '', description: 'choose test to run, leave blank to run all tests')

    // Define environment to run tests on
    choice(name: 'ENVIRONMENT', description: 'choose what environment to run in', choices: 'dev\nqa\ndevpopcorn\ndevkoala\nsandbox\nstaging\nuat')

    //Define branch to run
    string(name: 'BRANCH', defaultValue: 'master', description: 'choose branch to run against')
  }


  options {
    timestamps()
    ansiColor('xterm')
    buildDiscarder(logRotator(daysToKeepStr: '180'))
  }

  stages {

    stage('Run test') {
      steps {
          container('lite-selenium-test'){
            script {
               checkout([
                $class: 'GitSCM', branches: [[name: "${env.GIT_BRANCH}"]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'SubmoduleOption',
                        disableSubmodules: false,
                        parentCredentials: true,
                        recursiveSubmodules: true,
                        reference: '',
                        trackingSubmodules: false]],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: env.SCM_CREDENTIAL, url: 'https://github.com/uktrade/lite-internal-frontend.git']]
              ])

            try {
                if(env.TESTS_TO_RUN){
                    sh "py.test -k '${env.TESTS_TO_RUN}' -n '${env.NO_OF_PARALLEL_RUNNERS}' --dist=loadfile --ignore=core --disable-pytest-warnings --alluredir=ui_automation_tests/allure-results"
                } else {
                sh """
                    py.test -k 'smoke' --reruns 1 --ignore=core --disable-pytest-warnings --alluredir=ui_automation_tests/allure-results
                    if [ $? -eq 0 ]
                    then
                         py.test -k 'regression' -n \${env.NO_OF_PARALLEL_RUNNERS} --dist=loadfile --reruns 2 --ignore=core --disable-pytest-warnings --alluredir=ui_automation_tests/allure-results
                    fi
                """
                }
            } catch (error) {
                    archiveArtifacts artifacts: "ui_automation_tests/allure-results/**.*"
                    error.message
		    currentBuild.result = "UNSTABLE"
                  }

            }
            archiveArtifacts artifacts: "ui_automation_tests/allure-results/**.*"
          }
        }
    }

  }
  post {
    always {
      script {
       //unarchive mapping: ['ui_automation_tests/allure-results/**.*': '.']
       generateAllureReport()
      }
    }
    changed {
           // Send Slack notification
       sendSlackNotification()
    }
  }
}

// Generate Allure report function
def generateAllureReport()
{
try
{
  allure([
    commandline      : '2.5.0',
    includeProperties: false,
    jdk              : '',
    properties       : [[key: 'allure.tests.management.pattern', value: 'http://tms.company.com/%s']],
    reportBuildPolicy: 'ALWAYS',
    results          : [[path: 'ui_automation_tests/allure-results']]
    ])
  }
  catch (error)
  {
    error.message
  }
}

// Send Slack notification function
def sendSlackNotification()
{
	// build status of null means successful
	buildStatus =  currentBuild.result

    def emoji = ""
    if (buildStatus == "SUCCESS") {
        emoji = "ðŸŽ‰"
    } else {
        emoji = "ðŸ”¥"
    }

	def message = "${emoji}   UAT ${buildStatus} \nðŸ“‡   *lite-internal-frontend* \nðŸ”—   ${env.BUILD_URL}"

	// Set notification colour based on build status
	if ("${params.ENVIRONMENT}" == "uat" && (buildStatus == "SUCCESS" || buildStatus == "UNSTABLE" || buildStatus == "FAILURE")) {
		if (buildStatus == "SUCCESS") {
		    colourCode = "#00703c"
		} else if (buildStatus == "UNSTABLE") {
		    colourCode = "#f47738"
		} else {
		    colourCode = "#d4351c"
		}

		// Set slack channel
		channel = "lite-merging"

		// Send notifications
		slackSend (color: colourCode, message: message, channel: "#${channel}")
	}
}
